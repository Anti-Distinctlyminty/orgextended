%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - org
  - org_archive
# Generic parent scope of the file
scope: text.orgmode

variables:
  datetime: "<\\d{4}-\\d{2}-\\d{2}(?:\\s*\\w{3})?\\s*(\\d{2}\\:\\d{2})?\\s*([+]*\\d[wdmy])?>"
  unscheddatetime: "\\[\\d{4}-\\d{2}-\\d{2}(?:\\s*\\w{3})?\\s*(\\d{2}\\:\\d{2})?\\s*([+]*\\d[wdmy])?\\]"
  tags: "(^|):[\\w\\d:]+:"
  priority: '\s*\[((\#A)|(\#B)|(\#C)|(\#D)|(\#E)|(\#[a-zA-Z0-9]+))\]\s+'
  state: (TODO)|(BLOCKED)|(WAITING)|(CANCELLED)|(DONE)|(MEETING)|(PHONE)|(NOTE)|(IN-PROGRESS)|(DOING)|(NEXT)|(REASSIGNED)
  beginmrk: BEGIN_SRC|begin_src
  endmrk:   END_SRC|end_src
  beginsrc: '(\s*\#\+({{beginmrk}})\s+)'
  endsrc: '(\s*\#\+({{endmrk}})\s*)'
contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  #prototype:
  #- include: comments
  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    #- include: keywords
    #- include: numbers
    #- include: strings
      # --- # Todo investigate what this actually is?
    - match: ^\s*\-\-\- [^\n]*
      scope: orgmode.page
      # ~~~~~ # Todo investigate what this is?
    - match: ^\s*[~]+ [^\n]*
      scope: orgmode.break


      # Generic headline, TODO: Make multiple of these so we can color them
      # and sub captures so we can hide the extraneous stars
    - match: ^\s*[*] ({{state}} )?({{priority}})?[^\[\]:\n]*({{tags}})?
      scope: orgmode.headline
      captures:
        2: orgmode.state.todo
        3: orgmode.state.blocked
        4: orgmode.state.waiting
        5: orgmode.state.cancelled
        6: orgmode.state.done
        7: orgmode.state.meeting
        8: orgmode.state.phone
        9: orgmode.state.note
        10: orgmode.state.inprogress
        11: orgmode.state.doing
        12: orgmode.state.next
        13: orgmode.state.reassigned
        14: orgmode.priority
        15: orgmode.priority.value
        16: orgmode.priority.value.a
        17: orgmode.priority.value.b
        18: orgmode.priority.value.c
        19: orgmode.priority.value.d
        20: orgmode.priority.value.e
        21: orgmode.priority.value.general
        22: orgmode.tags.headline
    - match: ^\s*([*])([*] ({{state}}\s+)?({{priority}})?[^\[\]:\n]*)({{tags}})?
      captures:
        1: orgmode.preamble
        2: orgmode.headline2
        4: orgmode.state.todo
        5: orgmode.state.blocked
        6: orgmode.state.waiting
        7: orgmode.state.cancelled
        8: orgmode.state.done
        9: orgmode.state.meeting
        10: orgmode.state.phone
        11: orgmode.state.note
        12: orgmode.state.inprogress
        13: orgmode.state.doing
        14: orgmode.state.next
        15: orgmode.state.reassigned
        16: orgmode.priority
        17: orgmode.priority.value
        18: orgmode.priority.value.a
        19: orgmode.priority.value.b
        20: orgmode.priority.value.c
        21: orgmode.priority.value.d
        22: orgmode.priority.value.e
        23: orgmode.priority.value.general
        24: orgmode.tags.header
      scope: orgmode.headline2
    - match: ^\s*([*][*])([*] ({{state}}\s+)?({{priority}})?[^\[\]:\n]*)({{tags}})?
      captures:
        1: orgmode.preamble
        2: orgmode.headline3
        4: orgmode.state.todo
        5: orgmode.state.blocked
        6: orgmode.state.waiting
        7: orgmode.state.cancelled
        8: orgmode.state.done
        9: orgmode.state.meeting
        10: orgmode.state.phone
        11: orgmode.state.note
        12: orgmode.state.inprogress
        13: orgmode.state.doing
        14: orgmode.state.next
        15: orgmode.state.reassigned
        16: orgmode.priority
        17: orgmode.priority.value
        18: orgmode.priority.value.a
        19: orgmode.priority.value.b
        20: orgmode.priority.value.c
        21: orgmode.priority.value.d
        22: orgmode.priority.value.e
        23: orgmode.priority.value.general
        24: orgmode.tags.header
      scope: orgmode.headline3
    - match: ^\s*([*][*][*])([*] ({{state}}\s+)?({{priority}})?[^\[\]:\n]*)({{tags}})?
      captures:
        1: orgmode.preamble
        2: orgmode.headline4
        4: orgmode.state.todo
        5: orgmode.state.blocked
        6: orgmode.state.waiting
        7: orgmode.state.cancelled
        8: orgmode.state.done
        9: orgmode.state.meeting
        10: orgmode.state.phone
        11: orgmode.state.note
        12: orgmode.state.inprogress
        13: orgmode.state.doing
        14: orgmode.state.next
        15: orgmode.state.reassigned
        16: orgmode.priority
        17: orgmode.priority.value
        18: orgmode.priority.value.a
        19: orgmode.priority.value.b
        20: orgmode.priority.value.c
        21: orgmode.priority.value.d
        22: orgmode.priority.value.e
        23: orgmode.priority.value.general
        24: orgmode.tags.header
      scope: orgmode.headline4
    - match: ^\s*([*][*][*][*])([*] ({{state}}\s+)?({{priority}})?[^\[\]:\n]*)({{tags}})?
      captures:
        1: orgmode.preamble
        2: orgmode.headline5
        4: orgmode.state.todo
        5: orgmode.state.blocked
        6: orgmode.state.waiting
        7: orgmode.state.cancelled
        8: orgmode.state.done
        9: orgmode.state.meeting
        10: orgmode.state.phone
        11: orgmode.state.note
        12: orgmode.state.inprogress
        13: orgmode.state.doing
        14: orgmode.state.next
        15: orgmode.state.reassigned
        16: orgmode.priority
        17: orgmode.priority.value
        18: orgmode.priority.value.a
        19: orgmode.priority.value.b
        20: orgmode.priority.value.c
        21: orgmode.priority.value.d
        22: orgmode.priority.value.e
        23: orgmode.priority.value.general
        24: orgmode.tags.header
      scope: orgmode.headline5
    - match: ^\s*([*][*][*][*][*])([*] ({{state}}\s+)?({{priority}})?[^\[\]:\n]*)({{tags}})?
      captures:
        1: orgmode.preamble
        2: orgmode.headline6
        4: orgmode.state.todo
        5: orgmode.state.blocked
        6: orgmode.state.waiting
        7: orgmode.state.cancelled
        8: orgmode.state.done
        9: orgmode.state.meeting
        10: orgmode.state.phone
        11: orgmode.state.note
        12: orgmode.state.inprogress
        13: orgmode.state.doing
        14: orgmode.state.next
        15: orgmode.state.reassigned
        16: orgmode.priority
        17: orgmode.priority.value
        18: orgmode.priority.value.a
        19: orgmode.priority.value.b
        20: orgmode.priority.value.c
        21: orgmode.priority.value.d
        22: orgmode.priority.value.e
        23: orgmode.priority.value.general
        24: orgmode.tags.header
      scope: orgmode.headline6

    - match: ^\s*(\|.+\|)
      captures:
        1: orgmode.table.block
      scope: orgmode.table
      # DEADLINE: <DATETIME>
    - match: "(DEADLINE:) ({{datetime}})"
      captures:
        1: orgmode.statekeyword
        2: orgmode.datetime
      scope: orgmode.deadline
      # SCHEDULED: <DATETIME>
    - match: "(SCHEDULED:) ({{datetime}})"
      captures:
        1: orgmode.statekeyword
        2: orgmode.datetime
      scope: orgmode.scheduled
      # CLOSED: [DATETIME]
    - match: "(CLOSED:) ({{unscheddatetime}})"
      captures:
        1: orgmode.statekeyword
        2: orgmode.unscheddatetime
      scope: orgmode.closed
      # numbered list
    - match: "^\\s*[0-9]+\\. (([^:]+\\s+)(::))?"
      captures:
        2: orgmode.definition
        3: orgmode.definition.marker
      scope: orgmode.numberedlist
      # bullet list
    - match: "^\\s*\\- (([^:]+\\s+)(::))?"
      captures:
        2: orgmode.definition
        3: orgmode.definition.marker
      scope: orgmode.tack.minus
      # bullet list
    - match: "^\\s*\\+ (([^:]+\\s+)(::))?"
      captures:
        2: orgmode.definition
        3: orgmode.definition.marker
      scope: orgmode.tack.plus
      # To follow up: -> and =>
    - match: "^\\s*(\\-\\>|\\=\\>) "
      scope: orgmode.follow_up
      # [-] Checkbox
    - match: (\[[ ]\])\s?
      scope: orgmode.checkbox
    - match: (\[[xX]\])\s?
      scope: orgmode.checkbox.checked
    - match: (\[[\-]\])\s?
      scope: orgmode.checkbox.blocked
      # [#/#] Checkbox summary
    - match: (\[\d*[/%]\d*\])
      scope: orgmode.checkbox.summary
      # [[link]]
    - match: \[(\[([^\]]+)\])\]
      captures:
        1: orgmode.link.textblock
        2: orgmode.link.text.href
      scope: orgmode.link
      # [[link][name]]
    - match: \[(\[([^\]]+)\])(\[([^\]]+)\])\]
      captures:
        1: orgmode.link.hrefblock
        2: orgmode.link.href
        3: orgmode.link.textblock
        4: orgmode.link.text
      scope: orgmode.link
    - match: http[s]?://[^ \t]+
      scope: orgmode.link.href
    - match: \b([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})\b
      scope: orgmode.email
      # {numerical_value}
    - match: \{(\d+)\}
      scope: orgmode.link.internal.number
      # {{headline}}
    - match: \{\{(.+?)\}\}
      scope: orgmode.link.internal.headline
      # :TAG:
    - match: "(^|\\s):[\\w\\d:]+:"
      scope: orgmode.tags
      # [code] block, not sure what these are.
    - match: \[code\]\s*
      push:  code
    - match: ^\s*Traceback \(most recent call last\):\s*$
      push: pythonstack

    - match: \*[^*]+\*
      scope: orgmode.bold

    - match: /[^/]+/
      scope: orgmode.italics

    - match: _[^_]+_
      scope: orgmode.underline

    - match: \+[^\+]+\+
      scope: orgmode.strikethrough

    - match: ~[^~]+~
      scope: orgmode.code

    - match: =[^=]+=
      scope: orgmode.verbatim



    - match: '(\s*\#\+(BEGIN_CENTER|begin_center)\s*)'
      captures:
        1: orgmode.fence
      push:
        - meta_scope: orgmode.raw.block
        - meta_content_scope: orgmode.raw.block
        - match: '(\s*\#\+(END_CENTER|end_center)\s*)'
          captures:
            1: orgmode.fence
          pop: true
    - match: '(\s*\#\+(BEGIN_VERSE|begin_verse)\s*)'
      captures:
        1: orgmode.fence
      push:
        - meta_scope: orgmode.raw.block
        - meta_content_scope: orgmode.raw.block
        - match: '(\s*\#\+(END_VERSE|end_verse)\s*)'
          captures:
            1: orgmode.fence
          pop: true
    - match: '(\s*\#\+(BEGIN_QUOTE|begin_quote)\s*)'
      captures:
        1: orgmode.fence
      push:
        - meta_scope: orgmode.raw.block
        - meta_content_scope: orgmode.raw.block
        - match: '(\s*\#\+(END_QUOTE|end_quote)\s*)'
          captures:
            1: orgmode.fence
          pop: true
    - match: '(\s*\#\+(BEGIN_EXAMPLE|begin_example)\s*)'
      captures:
        1: orgmode.fence
      push:
        - meta_scope: orgmode.raw.block
        - meta_content_scope: orgmode.raw.block
        - match: '(\s*\#\+(END_EXAMPLE|end_example)\s*)'
          captures:
            1: orgmode.fence
          pop: true
    - match: '{{beginsrc}}(python\s*)'
      captures:
        1: orgmode.fence.sourceblock
        2: orgmode.fence.sourceblock
        3: orgmode.fence.language
        4: orgmode.fence.sourceblock
      push:
        - meta_scope: orgmode.raw.block
        - meta_content_scope: source.python
        - match: '{{endsrc}}'
          captures:
            1: orgmode.fence.sourceblock
          pop: true
        - include: scope:source.python
    - match: '{{beginsrc}}(cpp\s*)'
      captures:
        1: orgmode.fence.sourceblock
        2: orgmode.fence.sourceblock
        3: orgmode.fence.language
        4: orgmode.fence.sourceblock
      push:
        - meta_scope: orgmode.raw.block
        - meta_content_scope: source.c++
        - match: '{{endsrc}}'
          captures:
            1: orgmode.fence.sourceblock
          pop: true
        - include: scope:source.c++
    - match: '{{beginsrc}}(C\s*)'
      captures:
        1: orgmode.fence.sourceblock
        2: orgmode.fence.sourceblock
        3: orgmode.fence.language
        4: orgmode.fence.sourceblock
      push:
        - meta_scope: orgmode.raw.block
        - meta_content_scope: source.c
        - match: '{{endsrc}}'
          captures:
            1: orgmode.fence.sourceblock
          pop: true
        - include: scope:source.c
    - match: '{{beginsrc}}(perl\s*)'
      captures:
        1: orgmode.fence.sourceblock
        2: orgmode.fence.sourceblock
        3: orgmode.fence.language
        4: orgmode.fence.sourceblock
      push:
        - meta_scope: orgmode.raw.block
        - meta_content_scope: source.perl
        - match: '{{endsrc}}'
          captures:
            1: orgmode.fence.sourceblock
          pop: true
        - include: scope:source.perl
    - match: '{{beginsrc}}(ini\s*)'
      captures:
        1: orgmode.fence.sourceblock
        2: orgmode.fence.sourceblock
        3: orgmode.fence.language
        4: orgmode.fence.sourceblock
      push:
        - meta_scope: orgmode.raw.block
        - meta_content_scope: source.ini
        - match: '{{endsrc}}'
          captures:
            1: orgmode.fence.sourceblock
          pop: true
        - include: scope:source.ini
    - match: '{{beginsrc}}(js\s*)'
      captures:
        1: orgmode.fence.sourceblock
        2: orgmode.fence.sourceblock
        3: orgmode.fence.language
        4: orgmode.fence.sourceblock
      push:
        - meta_scope: orgmode.raw.block
        - meta_content_scope: source.js
        - match: '{{endsrc}}'
          captures:
            1: orgmode.fence.sourceblock
          pop: true
        - include: scope:source.js
    - match: '{{beginsrc}}(javascript\s*)'
      captures:
        1: orgmode.fence.sourceblock
        2: orgmode.fence.sourceblock
        3: orgmode.fence.language
        4: orgmode.fence.sourceblock
      push:
        - meta_scope: orgmode.raw.block
        - meta_content_scope: source.js
        - match: '{{endsrc}}'
          captures:
            1: orgmode.fence.sourceblock
          pop: true
        - include: scope:source.js
    - match: '{{beginsrc}}(php\s*)'
      captures:
        1: orgmode.fence.sourceblock
        2: orgmode.fence.sourceblock
        3: orgmode.fence.language
        4: orgmode.fence.sourceblock
      push:
        - meta_scope: orgmode.raw.block
        - meta_content_scope: source.php
        - match: '{{endsrc}}'
          captures:
            1: orgmode.fence.sourceblock
          pop: true
        - include: scope:source.php
    - match: '{{beginsrc}}(xml\s*)'
      captures:
        1: orgmode.fence.sourceblock
        2: orgmode.fence.sourceblock
        3: orgmode.fence.language
        4: orgmode.fence.sourceblock
      push:
        - meta_scope: orgmode.raw.block
        - meta_content_scope: text.xml
        - match: '{{endsrc}}'
          captures:
            1: orgmode.fence.sourceblock
          pop: true
        - include: scope:text.xml
    # This DOESNT WORK? WHY?
    - match: '{{beginsrc}}(csharp\s*|cs\s*)'
      captures:
        1: orgmode.fence.sourceblock
        2: orgmode.fence.sourceblock
        3: orgmode.fence.language
        4: orgmode.fence.sourceblock
      push:
        - meta_scope: orgmode.raw.block
        - meta_content_scope: source.cs
        - match: '{{endsrc}}'
          captures:
            2: orgmode.fence.sourceblock
          pop: true
        - include: scope:source.cs
    - match: '{{beginsrc}}(powershell\s*)'
      captures:
        1: orgmode.fence.sourceblock
        2: orgmode.fence.sourceblock
        3: orgmode.fence.language
        4: orgmode.fence.sourceblock
      push:
        - meta_scope: orgmode.raw.block
        - meta_content_scope: source.powershell
        - match: '{{endsrc}}'
          captures:
            1: orgmode.fence.sourceblock
          pop: true
        - include: scope:source.powershell
    - match: '{{beginsrc}}(plantuml\s*)'
      captures:
        1: orgmode.fence.sourceblock
        2: orgmode.fence.sourceblock
        3: orgmode.fence.language
        4: orgmode.fence.sourceblock
      push:
        - meta_scope: orgmode.raw.block
        - meta_content_scope: source.powershell
        - match: '{{endsrc}}'
          captures:
            1: orgmode.fence.sourceblock
          pop: true
        - include: scope:source.powershell
      # #+SOMETHING:
      # But not a dynamic block
      # Use negative look ahead to avoid matching begin and end dynamic blocks
    - match: '^\s*(\#\+(?!(BEGIN|END|begin|end))([a-zA-Z][a-zA-Z0-9_-]+)\:)\s*(.*)'
      scope: orgmode.controltag
      captures:
        1: orgmode.controltag.tag
        4: orgmode.controltag.text

    # #+BEGIN: NAME dynamic block support
    - match: '((\#\+BEGIN:|\#\+begin:)\s+([a-zA-Z0-9]+)\s+(.*)?\s*)'
      captures:
        1: orgmode.fence.dynamicblock
        2: orgmode.fence.dynamicblock.begin
        3: orgmode.fence.dynamicblock.name
        4: orgmode.fence.dynamicblock.params
      push:
        - meta_scope: orgmode.raw.block.dynamicblock
        - meta_content_scope: source.js
        - match: '(\#\+END:\s*|\#\+end:\s*)'
          captures:
            1: orgmode.fence.dynamicblock.end
          pop: true
        - include: scope:source.js
  code:
    - meta_scope: text
    - match: \s*\[/code\]
      pop: true

  pythonstack:
    - meta_scope: orgmode.python.traceback
    - match: "^\\s*\\w+: .+$"
      pop: true

